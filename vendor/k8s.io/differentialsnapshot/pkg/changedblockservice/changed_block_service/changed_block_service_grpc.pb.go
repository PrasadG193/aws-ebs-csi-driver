// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package changed_block_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DifferentialSnapshotClient is the client API for DifferentialSnapshot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DifferentialSnapshotClient interface {
	GetChangedBlocks(ctx context.Context, in *GetChangedBlocksRequest, opts ...grpc.CallOption) (*GetChangedBlocksResponse, error)
}

type differentialSnapshotClient struct {
	cc grpc.ClientConnInterface
}

func NewDifferentialSnapshotClient(cc grpc.ClientConnInterface) DifferentialSnapshotClient {
	return &differentialSnapshotClient{cc}
}

func (c *differentialSnapshotClient) GetChangedBlocks(ctx context.Context, in *GetChangedBlocksRequest, opts ...grpc.CallOption) (*GetChangedBlocksResponse, error) {
	out := new(GetChangedBlocksResponse)
	err := c.cc.Invoke(ctx, "/cbt.csi.v1.DifferentialSnapshot/GetChangedBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DifferentialSnapshotServer is the server API for DifferentialSnapshot service.
// All implementations must embed UnimplementedDifferentialSnapshotServer
// for forward compatibility
type DifferentialSnapshotServer interface {
	GetChangedBlocks(context.Context, *GetChangedBlocksRequest) (*GetChangedBlocksResponse, error)
	mustEmbedUnimplementedDifferentialSnapshotServer()
}

// UnimplementedDifferentialSnapshotServer must be embedded to have forward compatible implementations.
type UnimplementedDifferentialSnapshotServer struct {
}

func (UnimplementedDifferentialSnapshotServer) GetChangedBlocks(context.Context, *GetChangedBlocksRequest) (*GetChangedBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChangedBlocks not implemented")
}
func (UnimplementedDifferentialSnapshotServer) mustEmbedUnimplementedDifferentialSnapshotServer() {}

// UnsafeDifferentialSnapshotServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DifferentialSnapshotServer will
// result in compilation errors.
type UnsafeDifferentialSnapshotServer interface {
	mustEmbedUnimplementedDifferentialSnapshotServer()
}

func RegisterDifferentialSnapshotServer(s grpc.ServiceRegistrar, srv DifferentialSnapshotServer) {
	s.RegisterService(&DifferentialSnapshot_ServiceDesc, srv)
}

func _DifferentialSnapshot_GetChangedBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChangedBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DifferentialSnapshotServer).GetChangedBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbt.csi.v1.DifferentialSnapshot/GetChangedBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DifferentialSnapshotServer).GetChangedBlocks(ctx, req.(*GetChangedBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DifferentialSnapshot_ServiceDesc is the grpc.ServiceDesc for DifferentialSnapshot service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DifferentialSnapshot_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cbt.csi.v1.DifferentialSnapshot",
	HandlerType: (*DifferentialSnapshotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChangedBlocks",
			Handler:    _DifferentialSnapshot_GetChangedBlocks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "changedblockservice/changed_block_service.proto",
}
